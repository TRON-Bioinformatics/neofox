#
# Copyright (c) 2020-2030 Translational Oncology at the Medical Center of the Johannes Gutenberg-University Mainz gGmbH.
#
# This file is part of Neofox
# (see https://github.com/tron-bioinformatics/neofox).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.#
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: neoantigen.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


@dataclass
class Gene(betterproto.Message):
    # * The genome assembly to which the gene definition refers to (e.g.: GRCh37,
    # GRCh38)
    assembly: str = betterproto.string_field(1)
    # * The gene symbol or gene identifier, optional as the transcript
    # unequivocally identifies a gene
    gene: str = betterproto.string_field(2)
    # * The transcript identifier to which this neoepitope definition refers
    # (e.g.: Ensembl transcript id)
    transcript_identifier: str = betterproto.string_field(3)


@dataclass
class Mutation(betterproto.Message):
    # * The aminoacid position within the protein. 1-based, starting in the
    # N-terminus
    position: int = betterproto.int32_field(1)
    # * Sequence of aminoacids for the wild type xmer
    wild_type_xmer: str = betterproto.string_field(2)
    # * IUPAC code for the wild type aminoacid in this position
    wild_type_aminoacid: str = betterproto.string_field(3)
    # * Sequence of aminoacids for the mutated xmer
    mutated_xmer: str = betterproto.string_field(4)
    # * IUPAC code for the mutated aminoacid in this position
    mutated_aminoacid: str = betterproto.string_field(5)
    # * The left flanking region of variable size in IUPAC codes
    left_flanking_region: str = betterproto.string_field(6)
    # * The size of the left flanking region
    size_left_flanking_region: int = betterproto.int32_field(7)
    # * The right flanking region of variable size in IUPAC codes
    right_flanking_region: str = betterproto.string_field(8)
    # * The size of the right flanking region
    size_right_flanking_region: int = betterproto.int32_field(9)


@dataclass
class Neoantigen(betterproto.Message):
    """* A neoantigen minimal definition"""

    # * A unique identifier of a neoantigen
    identifier: str = betterproto.string_field(1)
    # * Patient identifier
    patient_identifier: str = betterproto.string_field(2)
    # * The gene where the neoepitope corresponds
    gene: "Gene" = betterproto.message_field(3)
    # * The mutation
    mutation: "Mutation" = betterproto.message_field(4)
    # * Clonality estimation. At the moment this is a boolean indicating whether
    # there is clonality or not, there is no quantitive measurement at the
    # moment.
    clonality_estimation: bool = betterproto.bool_field(5)
    # * Expression value of the transcript from RNA data. Range [0, +inf].
    rna_expression: float = betterproto.float_field(6)
    # * Variant allele frequency from the DNA. Range [0.0, 1.0]
    dna_variant_allele_frequency: float = betterproto.float_field(7)
    # * Variant allele frequency from the RNA. Range [0.0, 1.0]
    rna_variant_allele_frequency: float = betterproto.float_field(8)


@dataclass
class Patient(betterproto.Message):
    """
    * The metadata required for analysis for a given patient + its patient
    identifier
    """

    # * Patient identifier
    identifier: str = betterproto.string_field(1)
    # * Is RNA expression available?
    is_rna_available: bool = betterproto.bool_field(2)
    # * MHC I alleles
    mhc_i_alleles: List[str] = betterproto.string_field(3)
    # * MHC II alleles
    mhc_i_i_alleles: List[str] = betterproto.string_field(4)



@dataclass
class Annotation(betterproto.Message):
    """* This is a generic class to hold annotations from INPuT"""

    # * The name of the annotation
    name: str = betterproto.string_field(1)
    # * The value of the annotation TODO: make this better to hold int, float and
    # bool
    value: str = betterproto.string_field(2)


@dataclass
class NeoantigenAnnotations(betterproto.Message):
    """* A set of annotations for a neoantigen"""

    # * A unique identifier of a neoantigen
    neoantigen_identifier: str = betterproto.string_field(1)
    # * List of annotations
    annotations: List["Annotation"] = betterproto.message_field(2)
    # * The annotator
    annotator: str = betterproto.string_field(3)
    # * The version of the annotator
    annotator_version: str = betterproto.string_field(4)
    # * A timestamp determined when the annotation was created
    timestamp: str = betterproto.string_field(5)
    # * Annotation resources MD5 hash
    resources_hash: str = betterproto.string_field(6)
