syntax = "proto3";

package neoantigen;

message Transcript {
	/**
	The transcript identifier to which this neoepitope definition refers (e.g.: Ensembl transcript id)
	*/
	string identifier = 1;
	/**
	The genome assembly to which the gene definition refers to (e.g.: GRCh37, GRCh38)
	*/
	string assembly = 2;
	/**
	The gene symbol or gene identifier, optional as the transcript unequivocally identifies a gene
	*/
	string gene = 3;
}

message Mutation {
	/**
	The aminoacid position within the protein. 1-based, starting in the N-terminus
	*/
	int32 position = 1;
	/**
	Sequence of aminoacids for the wild type xmer
	*/
	string wildTypeXmer = 2;
	/**
	IUPAC code for the wild type aminoacid in this position
	*/
	string wildTypeAminoacid = 3;
	/**
	Sequence of aminoacids for the mutated xmer
	*/
	string mutatedXmer = 4;
	/**
	IUPAC code for the mutated aminoacid in this position
	*/
	string mutatedAminoacid = 5;
	/**
	The left flanking region of variable size in IUPAC codes
	*/
	string leftFlankingRegion = 6;
	/**
	The size of the left flanking region
	*/
	int32 sizeLeftFlankingRegion = 7;
	/**
	The right flanking region of variable size in IUPAC codes
	*/
	string rightFlankingRegion = 8;
	/**
	The size of the right flanking region
	*/
	int32 sizeRightFlankingRegion = 9;
}

/**
A neoantigen minimal definition
*/
message Neoantigen {
	/**
	A unique identifier of a neoantigen
	*/
	string identifier = 1;
	/**
	Patient identifier
	*/
	string patientIdentifier = 2;
	/**
	The transcript where the neoepitope was observed
	*/
	Transcript transcript = 3;
	/**
	The mutation
	*/
	Mutation mutation = 4;
	/**
	Clonality estimation. At the moment this is a boolean indicating whether there is clonality or not,
	there is no quantitive measurement at the moment.
	*/
	bool clonalityEstimation = 5;
	/**
	Expression value of the transcript from RNA data. Range [0, +inf].
	*/
	float rnaExpression = 6;
	/**
	Variant allele frequency from the DNA. Range [0.0, 1.0]
	*/
	float dnaVariantAlleleFrequency = 7;
	/**
	Variant allele frequency from the RNA. Range [0.0, 1.0]
	*/
	float rnaVariantAlleleFrequency = 8;
}

/**
The metadata required for analysis for a given patient + its patient identifier
*/
message Patient {
	/**
	Patient identifier
	*/
	string identifier = 1;
	/**
	Is RNA expression available?
	*/
	bool isRnaAvailable = 2;
	/**
	MHC I classic molecules
	*/
	repeated MhcOne mhcOne = 3;
	/**
	MHC II classic molecules
	*/
	repeated MhcTwo mhcTwo = 4;
}

/**
This is a generic class to hold annotations from INPuT
*/
message Annotation {
	/**
	The name of the annotation
	*/
	string name = 1;
	/**
	The value of the annotation
	TODO: make this better to hold int, float and bool
	*/
	string value = 2;
}

/**
A set of annotations for a neoantigen
*/
message NeoantigenAnnotations {
	/**
	A unique identifier of a neoantigen
	*/
	string neoantigenIdentifier = 1;
	/**
	List of annotations
	*/
	repeated Annotation annotations = 2;
	/**
	The annotator
	*/
	string annotator = 3;
	/**
	The version of the annotator
	*/
	string annotatorVersion = 4;
	/**
	A timestamp determined when the annotation was created
	*/
	string timestamp = 5;
	/**
	Annotation resources MD5 hash
	*/
	string resourcesHash = 6;
}

/**
The zygosity of a given gene
 */
enum Zygosity {
	/**
	Two equal copies of the gene
	 */
  HOMOZYGOUS = 0;
  /**
  Two different copies of the gene
   */
  HETEROZYGOUS = 1;
  /**
  Only one copy of the gene
   */
  HEMIZYGOUS = 2;
  /**
  No copy of the gene
   */
  LOSS = 3;
}

/**
Valid names for MHC I classic genes
 */
enum MhcOneName {
	A = 0;
	B = 1;
	C = 2;
}

/**
Valid names for MHC II classic genes.
DRA is not included in this list as it does not have much variability in the population and for our purpose is
considered constant.
 */
enum MhcTwoGeneName {
	DRB1 = 0;
	DPA1 = 1;
	DPB1 = 2;
	DQA1 = 3;
	DQB1 = 4;
}

/**
Valid names for MHC II classic molecules
 */
enum MhcTwoName {
	DR = 0;
	DP = 1;
	DQ = 2;
}

/**
Models MHC I alleles related to the same MHC I gene
 */
message MhcOne {
	/**
	MHC I gene name
	 */
	MhcOneName name = 1;
	/**
	Zygosity of the gene
	 */
	Zygosity zygosity = 2;
	/**
	The alleles of the gene (0, 1 or 2)
	 */
	repeated MhcAllele alleles = 3;
}

/**
Models MHC II alleles related to the same MHC II
 */
message MhcTwo {
	/**
	MHC II molecule name
	 */
	MhcTwoName name = 1;
	/**
	List of MHC II genes
	 */
	repeated MhcTwoGene genes = 2;
	/**
	Different combinations of MHC II alleles building different molecules
	 */
	repeated MhcTwoMolecule molecules = 3;
}

/**
MHC II molecule
 */
message MhcTwoMolecule {
	/**
	Name to refer to the MHC II molecule
	 */
	string name = 1;
	/**
	The alpha chain of the molecule
	 */
	MhcAllele alphaChain = 2;
	/**
	The beta chain of the molecule
	 */
	MhcAllele betaChain = 3;
}

/**
MHC II gene
 */
message MhcTwoGene {
	/**
	MHC II gene name
	 */
	MhcTwoGeneName name = 1;
	/**
	Zygosity of the gene
	 */
	Zygosity zygosity = 2;
	/**
	The alleles of the gene (0, 1 or 2)
	 */
	repeated MhcAllele alleles = 3;
}

/**
MHC allele representation. It does not include non synonymous changes to the sequence, changes in the non coding region
or changes in expression. See http://hla.alleles.org/nomenclature/naming.html for details
 */
message MhcAllele {
	/**
	HLA allele full name (e.g.: HLA-A*01:01)
	 */
	string name = 1;
	/**
	The gene from either MHC I or II (this information is redundant with the MhcOneGene.name and MhcTwoGene.name but it
	is convenient to have this at this level too, code will check for data coherence)
	 */
	string gene = 2;
	/**
	A group of alleles defined by a common serotype ie: Serological antigen carried by an allotype
	 */
	string group = 3;
	/**
	A specific HLA protein. Alleles whose numbers differ in group and protein must differ in one or more nucleotide
	substitutions that change the amino acid sequence of the encoded protein.
	 */
	string protein = 4;
}
